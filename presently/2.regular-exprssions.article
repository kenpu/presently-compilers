{"type":"article","source":"Regular Expressions","children":[{"type":"page","source":"Syntax of Regular Expressions","children":[{"type":"section","source":"slide:\nmath: 1\n..............\n","children":[{"type":"box","layout":"horizontal","source":"w: 2 3","children":[{"type":"markdown","source":"- `a`, `b`, `c`, ...\n  > Single symbols represent constant languages.\n  > `$L(a) = \\{a\\}$`\n  \n- $e_1 | e_2$\n  > `$L(e_1 | e_2) = L(e_1) \\cup L(e_2)$`\n\n- $e_1 e_2$\n  > `$L(e_1 e_2) = L(e_1) \\cdot L(e_2)$`\n\n- `$e*$`\n  > `$L(e*) = L(e)^*$`\n  \n- The empty string represents `$\\{\\epsilon\\}$`.","uuid":"18109d41-e4d7-441d-a739-96fd10de77d3","version":0},{"type":"markdown","source":"This is considered the _core_ regular expression.  There are many _extensions_ done to the syntax to make expressing certain patterns easier.\n\n- Dot: `.`\n  > Matches any single symbol.  This is the abbrevation for `a|b|c|d|...`\n- Caret: `^`\n  > Matches the start of a string.\n- `$`\n  > Matches the end of a string.\n- `$e? = \\epsilon|e$`\n  > Zero or one occurrence of $e$.\n","uuid":"773d8878-6190-4c1b-9757-309d24a7ccaa","version":0}],"uuid":"94d2530c-46a1-494d-9614-1765b310074e","version":0},{"type":"box","layout":"horizontal","source":"w: 2 3","children":[{"type":"markdown","source":"- `$e${m}` = $e e e \\dots e$ ($m$ times )\n  > Exactly $m$ occurrences of $e$.\n- `$e${m,n}`\n  > At least $m$ occurrences, but at most $n$ occurrences of $e$.\n- `$e${,n}`\n  > $m$ is defaulted to zero\n- `$e${m,}`\n  > $n$ is defaulted = $\\infty$","uuid":"933aeb38-d198-4f66-86e0-ca4520a25ef4","version":0},{"type":"markdown","source":"- Character classes\n  > - `[abc]` matches _one_ symbol in the set `$\\{a, b, c\\}$`.\n  > - `[a-z]` matches _one_ symbol in the range from `a` to `z` inclusively.\n  > - `[^abc]` matches _one_ symbol that is _anything but_ `$\\{a, b, c\\}$`\n- Predefined character classes\n  > `\\w`: a symbol that can be part of a word: `[a-zA-Z0-9_]` <br>\n  > `\\W`: a symbol not part of word: `[^\\w]` <br>\n  > `\\d`: a digit symbol <br>\n  > `\\D`: a non-digit symbol <br>\n  > `\\s`: a whitespace symbol <br>\n  > `\\S`: a non-whitespace","uuid":"033089c3-8bfb-4e29-98cf-b0e0047c0e44","version":0}],"uuid":"93bb6a3a-af82-496a-9b49-939decc6500c","version":0},{"type":"box","layout":"horizontal","source":"","children":[{"type":"markdown","source":"c: wide\n...............\n-----------\n_To learn more, see_\n- https://docs.python.org/2/library/re.html\n- https://docs.oracle.com/javase/tutorial/essential/regex/","uuid":"25eb2816-a893-4ec5-a988-79bf209c2ea7","version":0}],"uuid":"dc5110e7-3a0b-4c4c-96d3-96576a01b0c4","version":0}],"uuid":"cbb88577-4b21-4434-bb4a-c71afb8d5f16","version":0}],"uuid":"fffae16c-36c6-4b71-8cd5-3fbfb2340a97","version":0},{"type":"page","source":"Programmatic Regular Expressions","children":[{"type":"section","source":"slide:\nmath: 1\n..................\nGeneral usage of regular expressions","children":[{"type":"box","layout":"vertical","source":"","children":[{"type":"markdown","source":"- Matching\n  > We want to check if a given string satisfies a certain pattern.  Formally, we are checking:\n  `$$s\\in L(e)$$`\n","uuid":"8fa5b021-7801-45b5-8d61-41cdc637c2af","version":0},{"type":"markdown","source":"- Search\n  > We want to check if a given string contains a certain pattern.  Formally, we are checking:\n    `$$s\\in \\Sigma^*\\cdot L(e)\\cdot\\Sigma^*$$`\n\nNote: _search_ is a simple case of _match_.","uuid":"fe628a33-7f32-41a8-b3b0-3d3940265fd5","version":0},{"type":"markdown","source":"- Capture\n  > We want to extract the specific parts of a given string.  Each part is described by a pattern.","uuid":"3875cd90-3862-4c4a-a378-bee810add2cf","version":0}],"uuid":"c59fe74c-8edf-42dd-acd7-ce61afdfb736","version":0}],"uuid":"5a8ec02d-6252-4ac1-b1aa-88fec750d07a","version":0},{"type":"section","source":"slide:\n........................\nMatching & Searching","children":[{"type":"box","layout":"horizontal","source":"w: 1 2","children":[{"type":"markdown","source":"Java offers excellent support for regular expressions.\n\n- [java.util.regex](https://docs.oracle.com/javase/8/docs/api/java/util/regex/package-summary.html)\n- [Pattern](https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)\n  > A regular expression pattern\n- [Matcher](https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html)\n  > A matching session against a specific string.","uuid":"fc7e9197-8398-4f27-b513-804d47df08b1","version":0},{"type":"box","layout":"horizontal","source":"css:\n  maxHeight: 500\n  overflow: scroll","children":[{"type":"variant","version":0,"source":"type: gist\ngist: kenpu/8b17e98239e7f0a32314\nfile: Demo1.java","uuid":"e537d47f-ad40-45a0-ae9f-f23fddb61d3a"}],"uuid":"99b711f7-f273-44ff-a8ef-502d30dfa5c3","version":0}],"uuid":"b46ecac2-d61c-4042-9779-33a15e3b55ba","version":0}],"uuid":"cfa4009e-e3ed-4dc3-bcd0-d2a6dc955958","version":0},{"type":"section","source":"slide:\nmath: 1\n...................\nCapturing with Groups","children":[{"type":"box","layout":"horizontal","source":"w: 2 3","children":[{"type":"markdown","source":"- Defining groups\n > Any subexpressions of a regular expression can be enclosed by parentheses `(...)`.\n > Any parenthese enclosed subexpression is called a _group_.\n \n*Example*:\n\n~~~\n$e$ = Name: (\\w+)\\s+(\\w*)\n~~~","uuid":"85ef19f1-bfb9-424d-b82c-f94d22c0ac87","version":0},{"type":"markdown","source":"- Groups are indexes by a positive integer\n> - $e$ has two groups, indexed by 1, 2.\n> - group 0 is special -- it refers to the entire regexp $e$.\n> - During matching, each group captures the text that matches the subexpressions of that group.\n- `java.util.regexp.Matcher` provides methods to access the matched text of the groups.\n> - `int Matcher.groupCount()`: counts the number of groups of a matcher.\n> - `String Matcher.group(int i)`: gets the matching of the subexpression for group $i$.","uuid":"19b15667-68a2-45c0-94cb-9c5b5b1821e4","version":0}],"uuid":"1a58dd8a-a0be-4b40-82a7-562d33aaada9","version":0},{"type":"box","layout":"horizontal","source":"w: 0 1\ndivide: 1","children":[{"type":"code","source":"lang: java\nlinenum: 1\n........................\nString line;\nPattern namePattern = Pattern.compile(\"Name: (\\w+)\\s+(\\w*)\")\nBufferedReader reader = new BufferedReader(\n                           new FileReader(\"text.name\"));\n\nwhile((line = reader.readLine) != null) {\n  Matcher m = namePattern.matcher(line);\n  while(m.find()) {\n    String firstName = m.group(1);\n    String lastName = m.group(2);\n    out.Printf(\"%s, %s\\n\", lastName, firstName);\n  }\n}","uuid":"d944beed-9311-4dd8-9baa-bf98d146c181","version":0},{"type":"markdown","source":"This code snippet outlines how to implement a pattern-based name extraction using regular expression capturing.","uuid":"877ba265-8c42-4147-a2ff-050358c9f4f9","version":0}],"uuid":"9528045f-df43-4b89-bf29-b4cf1243cc66","version":0}],"uuid":"5ac0b615-f2f9-427b-9a64-788e709b7e40","version":0}],"uuid":"84448682-d271-4aaa-ac8e-02d7e809d4b7","version":0},{"type":"page","source":"Summary","children":[{"type":"section","source":"slide:\n..................\n","children":[{"type":"box","layout":"horizontal","source":"w: 2 3\ngravity: c","children":[{"type":"markdown","source":"- Regular expression is the pragmmatic tool to define _regular languages_.\n\n- It's really useful to define and extract string patterns with regular expressions.\n\n- RE has become the corner stone of every major standard libraries.\n> - Java `java.util.regex`\n> - Python `import re`\n> - Javascript `new Regex(...)`\n> - Go `import \"re\"`","uuid":"0f73b5f1-94fc-441b-82f2-4e6e90c01716","version":0},{"type":"markdown","source":"c: banner\n..........\n>Some people, when confronted with a problem, think _\"I know, I'll use regular expressions.\"_ Now they have two problems.\n\n<div style=\"float: right; font-size: 25pt\">_James Zawinski_</div>\n","uuid":"5f2f6454-1d16-43bc-adf8-b795e7850fef","version":0}],"uuid":"cd5e2882-7b7a-4185-8069-5c9357e30cfb","version":0}],"uuid":"262c8a39-6fd4-4204-aafb-ca642a3ee62a","version":0}],"uuid":"cafd6c0b-457d-4e58-b773-8d8a49e6581a","version":0}],"uuid":"ff0e0076-7b8c-413a-b9e3-77a528e56748","modified":true,"version":3,"history":4}